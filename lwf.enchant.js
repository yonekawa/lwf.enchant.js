// Generated by CoffeeScript 1.3.3

/*
 * @fileOverview
 * lwd.enchant.js
 * @version 0.1.0
 * @require enchant.js v0.5.2.
 * @author Kenichi Yonekawa
 *
 * @description
 *   Plugin for using LWF(https://github.com/gree/lwf) with enchant.js.
 *
*/


(function() {
  var CanvasGroup, currentTime, fromTime, _ref;

  LWF.useCanvasRenderer();

  window.enchant.lwf = {
    _env: {
      frameRate: 60,
      use3D: true
    }
  };

  enchant.Event.LWF_LOADED = 'lwf_loaded';

  enchant.lwf.requestAnimationFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  currentTime = 0;

  fromTime = 0;

  enchant.lwf.calcTick = function() {
    var tick;
    currentTime = Date.now() / 1000.0;
    tick = currentTime - fromTime;
    fromTime = currentTime;
    return tick;
  };

  CanvasGroup = (_ref = enchant.CanvasLayer) != null ? _ref : enchant.CanvasGroup;

  enchant.lwf.LWFEntity = enchant.Class.create(CanvasGroup, {
    initialize: function(lwfFileName, lwfPrefix) {
      var _this = this;
      CanvasGroup.call(this);
      this._lwfFileName = lwfFileName;
      this._lwfPrefix = lwfPrefix;
      this._cache = LWF.ResourceCache.get();
      if (enchant.ENV.TOUCH_ENABLED) {
        this._element.addEventListener('touchstart', (function(e) {
          return _this.onTouchStart(e);
        }), false);
        this._element.addEventListener('touchmove', (function(e) {
          return _this.onTouchMove(e);
        }), false);
        return this._element.addEventListener('touchend', (function(e) {
          return _this.onTouchEnd(e);
        }), false);
      } else {
        this._element.addEventListener('mousedown', (function(e) {
          return _this.onTouchStart(e);
        }), false);
        this._element.addEventListener('mousemove', (function(e) {
          return _this.onTouchMove(e);
        }), false);
        return this._element.addEventListener('mouseup', (function(e) {
          return _this.onTouchEnd(e);
        }), false);
      }
    },
    load: function() {
      var _this = this;
      return this._cache.loadLWF({
        lwf: this._lwfFileName,
        prefix: this._lwfPrefix,
        stage: this._element,
        use3D: enchant.lwf._env.use3D,
        onload: function(lwf) {
          var e;
          _this.lwf = lwf;
          _this.lwf.setFrameRate(enchant.lwf._env.frameRate);
          e = new enchant.Event(enchant.Event.LWF_LOADED);
          e.lwf = lwf;
          _this._element.width = lwf.width;
          _this._element.height = lwf.height;
          _this._element.style.width = "" + lwf.width + "px";
          _this._element.style.height = "" + lwf.height + "px";
          _this.dispatchEvent(e);
          return _this.main();
        }
      });
    },
    main: function() {
      var _this = this;
      enchant.lwf.requestAnimationFrame.call(window, function() {
        return _this.main();
      });
      if (this.lwf != null) {
        this.lwf.exec(enchant.lwf.calcTick());
        return this.lwf.render();
      }
    },
    onTouchStart: function(e) {
      var x, y;
      x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft - this._element.offsetLeft;
      y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop - this._element.offsetTop;
      if (this.lwf != null) {
        this.lwf.inputPoint(x, y);
        this.lwf.inputPress();
      }
      e = new enchant.Event(enchant.Event.TOUCH_START);
      e._initPosition(x, y);
      return this.dispatchEvent(e);
    },
    onTouchMove: function(e) {
      var x, y;
      x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft - this._element.offsetLeft;
      y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop - this._element.offsetTop;
      if (this.lwf != null) {
        this.lwf.inputPoint(x, y);
      }
      e = new enchant.Event(enchant.Event.TOUCH_MOVE);
      e._initPosition(x, y);
      return this.dispatchEvent(e);
    },
    onTouchEnd: function(e) {
      var x, y;
      x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft - this._element.offsetLeft;
      y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop - this._element.offsetTop;
      if (this.lwf != null) {
        this.lwf.inputRelease();
      }
      e = new enchant.Event(enchant.Event.TOUCH_END);
      e._initPosition(x, y);
      return this.dispatchEvent(e);
    }
  });

}).call(this);
