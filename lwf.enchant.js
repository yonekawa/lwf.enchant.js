// Generated by CoffeeScript 1.3.3

/*
 * @fileOverview
 * lwd.enchant.js
 * @version 0.1.0
 * @require enchant.js v0.5.2.
 * @author Kenichi Yonekawa
 *
 * @description
 *   Plugin for using LWF(https://github.com/gree/lwf) with enchant.js.
 *
*/


(function() {
  var currentTime, fromTime, main;

  LWF.useCanvasRenderer();

  window.enchant.lwf = {
    _env: {
      frameRate: 60,
      scale: 1,
      use3D: true
    }
  };

  enchant.Event.LWF_LOADED = 'lwf_loaded';

  enchant.lwf.requestAnimationFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / window.enchant.lwf._env.frameRate);
    };
  })();

  currentTime = 0;

  fromTime = 0;

  enchant.lwf.calcTick = function() {
    var tick;
    currentTime = Date.now() / 1000.0;
    tick = currentTime - fromTime;
    fromTime = currentTime;
    return tick;
  };

  enchant.lwf.entities = [];

  main = function() {
    var entity, tick, _i, _len, _ref, _results;
    enchant.lwf.requestAnimationFrame.call(window, main);
    tick = enchant.lwf.calcTick();
    _ref = enchant.lwf.entities;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      entity = _ref[_i];
      entity.lwf.exec(tick);
      _results.push(entity.lwf.render());
    }
    return _results;
  };

  main();

  enchant.lwf.LWFEntity = enchant.Class.create(enchant.Entity, {
    initialize: function(lwfFileName, lwfPrefix) {
      var CanvasGroup, _ref,
        _this = this;
      enchant.Entity.call(this);
      this._lwfFileName = lwfFileName;
      this._lwfPrefix = lwfPrefix;
      this._cache = LWF.ResourceCache.get();
      CanvasGroup = (_ref = enchant.CanvasLayer) != null ? _ref : enchant.CanvasGroup;
      this._canvas = new CanvasGroup();
      this._element = this._canvas._element;
      this._directionX = 1;
      this._directionY = 1;
      if (enchant.ENV.TOUCH_ENABLED) {
        this._element.addEventListener('touchstart', (function(e) {
          return _this.onTouchStart(e);
        }), false);
        this._element.addEventListener('touchmove', (function(e) {
          return _this.onTouchMove(e);
        }), false);
        return this._element.addEventListener('touchend', (function(e) {
          return _this.onTouchEnd(e);
        }), false);
      } else {
        this._element.addEventListener('mousedown', (function(e) {
          return _this.onTouchStart(e);
        }), false);
        this._element.addEventListener('mousemove', (function(e) {
          return _this.onTouchMove(e);
        }), false);
        return this._element.addEventListener('mouseup', (function(e) {
          return _this.onTouchEnd(e);
        }), false);
      }
    },
    load: function(callback) {
      var _this = this;
      if (callback == null) {
        callback = null;
      }
      return this._cache.loadLWF({
        lwf: this._lwfFileName,
        prefix: this._lwfPrefix,
        stage: this._element,
        use3D: enchant.lwf._env.use3D,
        onload: function(lwf) {
          var e;
          _this.lwf = lwf;
          _this.lwf.scaleForWidth(Math.round(lwf.width / enchant.lwf._env.scale));
          _this.lwf.setFrameRate(enchant.lwf._env.frameRate);
          e = new enchant.Event(enchant.Event.LWF_LOADED);
          e.lwf = lwf;
          _this._element.width = lwf.width;
          _this._element.height = lwf.height;
          _this._element.style.width = "" + lwf.width + "px";
          _this._element.style.height = "" + lwf.height + "px";
          if (typeof callback === "function") {
            callback(lwf);
          }
          _this.dispatchEvent(e);
          _this.addEventListener(enchant.Event.REMOVED_FROM_SCENE, function() {
            var index;
            index = enchant.lwf.entities.indexOf(_this);
            if (index !== -1) {
              return enchant.lwf.entities.splice(index, 1);
            }
          });
          _this.addEventListener(enchant.Event.ADDED_FROM_SCENE, function() {
            if (enchant.lwf.entities.indexOf(_this) === -1) {
              return enchant.lwf.entities.unshift(_this);
            }
          });
          return _this.dispatchEvent(enchant.Event.ADDED_FROM_SCENE);
        }
      });
    },
    width: {
      get: function() {
        return this._element.width / enchant.lwf._env.scale;
      }
    },
    height: {
      get: function() {
        return this._element.height / enchant.lwf._env.scale;
      }
    },
    x: {
      get: function() {
        return this._x;
      },
      set: function(x) {
        this._x = x;
        return this._element.style.left = "" + x + "px";
      }
    },
    y: {
      get: function() {
        return this._y;
      },
      set: function(y) {
        this._y = y;
        return this._element.style.top = "" + y + "px";
      }
    },
    reverseX: function() {
      this._directionX *= -1;
      return this._element.style.webkitTransform = "translateZ(0) scale(" + this._directionX + ", " + this._directionY + ")";
    },
    reverseY: function() {
      this._directionY *= -1;
      return this._element.style.webkitTransform = "translateZ(0) scale(" + this._directionX + ", " + this._directionY + ")";
    },
    onTouchStart: function(e) {
      var clientX, clientY, x, y;
      clientX = e.clientX != null ? e.clientX : e.touches[0].clientX;
      clientY = e.clientY != null ? e.clientY : e.touches[0].clientY;
      x = clientX + document.body.scrollLeft + document.documentElement.scrollLeft - this._element.offsetLeft;
      y = clientY + document.body.scrollTop + document.documentElement.scrollTop - this._element.offsetTop;
      if (this.lwf != null) {
        this.lwf.inputPoint(x, y);
        this.lwf.inputPress();
      }
      e = new enchant.Event(enchant.Event.TOUCH_START);
      e._initPosition(x, y);
      return this.dispatchEvent(e);
    },
    onTouchMove: function(e) {
      var clientX, clientY, x, y;
      clientX = e.clientX != null ? e.clientX : e.touches[0].clientX;
      clientY = e.clientY != null ? e.clientY : e.touches[0].clientY;
      x = clientX + document.body.scrollLeft + document.documentElement.scrollLeft - this._element.offsetLeft;
      y = clientY + document.body.scrollTop + document.documentElement.scrollTop - this._element.offsetTop;
      if (this.lwf != null) {
        this.lwf.inputPoint(x, y);
      }
      e = new enchant.Event(enchant.Event.TOUCH_MOVE);
      e._initPosition(x, y);
      return this.dispatchEvent(e);
    },
    onTouchEnd: function(e) {
      if (this.lwf != null) {
        this.lwf.inputRelease();
      }
      e = new enchant.Event(enchant.Event.TOUCH_END);
      return this.dispatchEvent(e);
    }
  });

}).call(this);
